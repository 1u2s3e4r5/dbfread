dbfget - Python library for getting data out of DBF files
=========================================================

Requires Python 2.7 or 3.2 (works in both without change)

Project page: http://nerdly.info/ole/dbf/

License: MIT

Latest version of the source code: https://github.com/olemb/dbfget/


Status
------

The API is still not quite finalized. I am hoping for some feedback.

More examples, documentation and testing is needed.

My goal is to make ``dbfget`` THE library for getting data out of old
dbf files. I am aware of other projects such as
http://dbfpy.sourceforge.net/ but they seem to have slightly different
goals. I would like to cooperate and share ideas and code with anyone
out there working on their own dbf library. I will try to get in touch
with some of you, but if you read this and haven't heard from me,
don't hesitate to send me an email.


Example
-------


Real world example (Telemator table data)::

    >>> import dbfget
    >>>
    >>> 
    >>> cables = dbfget.read('/telemator/stamnett/kabreg.dbf')
    >>> len(cables)
    552
    >>> cables[0]
    {'CABLE': 'ROOM1-ROOM2#2'
     'END_A': 'ROOM1',
     'END_B': 'ROOM2',
     'NUMCORES': 12, 
     'UPDWHEN': datetime.datetime(2010, 5, 27, 9, 38, 20),
     ... etc ... }

```dbfget.read()``` returns a list of dictionaries, but we can tweak
it to return whatever we want. How about Python objects?

::

    >>> cables = dbfget.read('/telemator/stamnett/kabreg.dbf',
                             lowernames=True,
                             recfactory=dbfget.RowObject)
    >>> for c in cables:
    ...     print('Cable %s has %s cores' % (c.cable, c.numcores))
    Cable ROOM1-ROOM2#2 has 12 cores 
    Cable SNIP_SNUDDELI_SNUPP has 24 cores

(I'm making these cable and end names up, by the way, we don't really
name things like that here. :) )

Other options::

   recfactory=None  # Just return the raw tuples
   recfactory=collections.OrderedDict

Any callable which takes a list of ```(name, value)``` tuples will do.

Other options::
   
   lowernames=True    # field names will be converted to lowercase   
   ignorecase=False   # treat file names with different case as different files

All text in field names and values is converted into unicode. For
this, ```dbfget``` needs to know the encoding. You can pass this with::

   encoding='cp1254'     # text is Turkish (code page 1254)
   encoding='shift-jis'  # text is Japanese SHIFT-JIS encoded

There is currently no way for ```dbfget``` to find the encoding on its
own, so you do need to pass some value, or just make do with whatever
the default value ```latin1``` produces.


Installing
----------

Python 2::

  sudo python setup.py install

Python 3::

  sudo python3 setup.py install
    

Features
--------

  - the table object is a subclass of list
  - records are dictionaries
  - data is converted to native Python types
    (see Supported field types below)
  - records can optionally be returned as any kind of object
    (using the recfactory option, which defaults to ``dict``)
  - reads memo fields (.fpt) and returns them as unicode strings
    (binary memo fields are returned as byte strings)
  - strings are decoded and returned as unicode
    (defaults to 'latin1', unless you supply a the ``encoding``
    option)
  - file name case agnostic (``read('kabreg.dbf')`` will find
    ``KabReg.dbf`` and the memo file ``KABREG.FPT``). This
    (behaviour can be turned off by passing ``ignorecase=False``)


Possible future features
------------------------

  - auto-detection of code page / encoding. This is tricky, since
    the value is stored in only one byte, which is vendor specific,
    and in most files I've seen is just set to 0.
  - easy export to SQL / CSV
  - raw mode (to get all values as raw byte strings)

    
Status
------

This code in various incarnations has been in production at the
University of Tromsø since 2001. The current version reads all data
generated by Telemator (a network documentation system), which uses
Foxpro (as far as I can tell) and employs a wide range of data types.

The library has not been widely tested on other data, but I intend for
it to be able to read ANY dbf file. If you have a file it can't read,
or find a bug, I'd love to hear from you.

   
Supported field types
----------------------

=  ==========  ====================================================================
:  Field type   Converted to
=  ==========  ====================================================================
0  flags       int
C  text        unicode string
D  date        datetime.date or None
F  float       float or None
I  integer     int or None
L  logical     True, False or None
M  memo        unicode string (memo type) or byte string (picture and object type)
N  numeric     int, float or None
T  time        datetime.datetime
=  ==========  ====================================================================


Contact
--------

Ole Martin Bjørndalen - ombdalen@gmail.com - http://nerdly.info/ole/
